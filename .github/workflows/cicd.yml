name: Retrain and (Optionally) Redeploy RCT Model

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write     # REQUIRED for OIDC
  contents: read

env:
  AWS_REGION: ap-southeast-2                 
  PIPELINE_ENTRY: pipeline/rct_pipeline.py   
  PYTHON_VERSION: "3.11"                     

jobs:
  retrain-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::383868855578:role/GitHubSageMakerRole   
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      # If you have a requirements.txt, install from it; otherwise install the minimum
      - name: Install dependencies (requirements.txt if present)
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install "sagemaker<3" boto3 pandas numpy
          fi

      # (Optional but recommended) quick import check to fail fast
      - name: Sanity check import
        run: python -c "import sys; print('Python OK:', sys.version)"

      # Run your pipeline definition. It must create/start a SageMaker Pipeline execution.
      # If your script accepts parameters (e.g. S3 input), pass them via env or CLI flags here.
      - name: Run SageMaker Pipeline
        run: |
          python "$PIPELINE_ENTRY"

      # Optional: wait for the execution and fail if metrics are bad.
      # Keep this commented until your script supports describe/wait & quality gates.
      # - name: Wait for pipeline completion (optional)
      #   run: python pipeline/wait_for_pipeline.py --name RCTPipeline --fail-on-low-metric  # example

